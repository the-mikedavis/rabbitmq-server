load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load("@rules_erlang//:xref2.bzl", "xref")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "rabbitmq_app",
)
load(
    ":app.bzl",
    "all_beam_files",
    "all_srcs",
    "all_test_beam_files",
    "test_suite_beam_files",
)

# gazelle:erlang_app_testonly

# gazelle:erlang_always_generate_test_beam_files

all_beam_files(name = "all_beam_files")

all_test_beam_files(name = "all_test_beam_files")

all_srcs(name = "all_srcs")

test_suite_beam_files(name = "test_suite_beam_files")

rabbitmq_app(
    name = "erlang_app",
    testonly = True,
    srcs = [":all_srcs"],
    hdrs = [":public_hdrs"],
    app_name = "rabbitmq_ct_client_helpers",
    beam_files = [":beam_files"],
    license_files = [":license_files"],
    priv = [":priv"],
    deps = [
        "//deps/amqp_client:erlang_app",
        "//deps/rabbitmq_ct_helpers:erlang_app",
    ],
)

alias(
    name = "rabbitmq_ct_client_helpers",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    apps = [
        "common_test",  # keep
    ],
    for_target = ":erlang_app",
    ignore_warnings = True,
    libs = ["@rules_elixir//elixir"],  # keep
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":erlang_app",
)

assert_suites()

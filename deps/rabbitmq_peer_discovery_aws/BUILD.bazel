load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    "rabbitmq_app",
    "rabbitmq_integration_suite",
    "rabbitmq_suite",
)
load(
    ":app.bzl",
    "all_beam_files",
    "all_srcs",
    "all_test_beam_files",
    "test_suite_beam_files",
)

APP_NAME = "rabbitmq_peer_discovery_aws"

APP_DESCRIPTION = "AWS-based RabbitMQ peer discovery backend"

all_beam_files(name = "all_beam_files")

all_test_beam_files(name = "all_test_beam_files")

all_srcs(name = "all_srcs")

test_suite_beam_files(name = "test_suite_beam_files")

# gazelle:erlang_app_extra_app inets

rabbitmq_app(
    name = "erlang_app",
    srcs = [":all_srcs"],
    hdrs = [":public_hdrs"],
    app_description = APP_DESCRIPTION,
    app_name = APP_NAME,
    beam_files = [":beam_files"],
    extra_apps = ["inets"],
    license_files = [":license_files"],
    priv = [":priv"],
    deps = [
        "//deps/rabbit:erlang_app",
        "//deps/rabbit_common:erlang_app",
        "//deps/rabbitmq_aws:erlang_app",
        "//deps/rabbitmq_peer_discovery_common:erlang_app",
    ],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    ignore_warnings = True,
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":erlang_app",
)

eunit(
    name = "eunit",
    compiled_suites = [":test_aws_ecs_util_beam"],
    target = ":test_erlang_app",
)

broker_for_integration_suites()

rabbitmq_integration_suite(
    name = "config_schema_SUITE",
    size = "medium",
)

# NOTE: integration_SUITE requires aws credentials and a docker image.
# They can be supplied with:
# --test_env AWS_ACCESS_KEY_ID=... --test_env AWS_SECRET_ACCESS_KEY=...
# --test_env RABBITMQ_IMAGE=...
# bazel args
rabbitmq_suite(
    name = "integration_SUITE",
    size = "large",
    additional_beam = [
        "test/aws_ecs_util.beam",
    ],
    tags = [
        "aws",
        "external",
    ],
    deps = [
        "//deps/rabbitmq_ct_helpers:erlang_app",
    ],
)

rabbitmq_suite(
    name = "unit_SUITE",
    size = "small",
    deps = [
        "@meck//:erlang_app",
    ],
)

assert_suites()

alias(
    name = "rabbitmq_peer_discovery_aws",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)
